#lang racket
(struct gnode (val lst) #:transparent)
(struct nulltree () #:transparent)
(define t4 (gnode 2 (list 
                 (gnode 1 '())
                 (gnode 3 '()))))
(define t6 (gnode 6 '()))
(define t7 (gnode 2  (list (gnode 7 '())
                 (gnode 9 '()))))
(define t8 (gnode 8 (list (gnode 7 '())
                 (gnode 9 '()))))   
(define t10 (gnode 12 (list (gnode 11 '())
                  (gnode 13 '()))))
(define t11 (gnode 16 (list (gnode 15 '())
                  (gnode 17 '() ))))
(define t9  (gnode 14 (list t10 t11)))
(define t3  (gnode 10  (list t8 t9)))
(define t5  (gnode 5 '()))
(define t2  (gnode 4  (list t4 t5)))
(define t1  (gnode 6 (list t2 t3)))
(define (stLevel t n ) 
  (if (null? t) '()
   (if ( = n 1) (list (gnode-val t))
      (foldr (lambda (x y)( append (stLevel x (- n 1) ) y)) '() (gnode-lst t))
      )
   )
  )
  