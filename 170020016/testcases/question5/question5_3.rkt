#lang racket
(require "q5.rkt")
(define test-tree (node '* (node '+ (node '+ (node '+ (node '* (node '* (leaf 3) (leaf 1)) (node '* (leaf 4) (leaf 5))) (node '* (node '+ (leaf 1) (leaf 1)) (node '* (leaf 4) (leaf 1)))) (node '+ (node '+ (node '* (leaf 5) (leaf 6)) (node '+ (leaf 8) (leaf 2))) (node '* (node '* (leaf 9) (leaf 6)) (node '+ (leaf 1) (leaf 7))))) (node '+ (node '+ (node '* (node '+ (leaf 6) (leaf 0)) (node '+ (leaf 7) (leaf 8))) (node '* (node '* (leaf 7) (leaf 3)) (node '+ (leaf 7) (leaf 2)))) (node '* (node '* (node '+ (leaf 8) (leaf 0)) (node '* (leaf 5) (leaf 2))) (node '+ (node '+ (leaf 1) (leaf 6)) (node '* (leaf 1) (leaf 6)))))) (node '* (node '* (node '* (node '+ (node '* (leaf 9) (leaf 0)) (node '* (leaf 2) (leaf 8))) (node '+ (node '* (leaf 8) (leaf 9)) (node '* (leaf 9) (leaf 9)))) (node '+ (node '* (node '* (leaf 0) (leaf 5)) (node '+ (leaf 1) (leaf 5))) (node '+ (node '* (leaf 1) (leaf 2)) (node '* (leaf 1) (leaf 5))))) (node '* (node '+ (node '+ (node '+ (leaf 6) (leaf 4)) (node '+ (leaf 6) (leaf 1))) (node '+ (node '* (leaf 2) (leaf 3)) (node '* (leaf 5) (leaf 3)))) (node '+ (node '+ (node '+ (leaf 6) (leaf 2)) (node '+ (leaf 2) (leaf 3))) (node '+ (node '* (leaf 8) (leaf 5)) (node '+ (leaf 7) (leaf 2))))))))
(equal? (convert test-tree) "(3*1*4*5+(1+1)*4*1+5*6+8+2+9*6*(1+7)+(6+0)*(7+8)+7*3*(7+2)+(8+0)*5*2*(1+6+1*6))*(9*0+2*8)*(8*9+9*9)*(0*5*(1+5)+1*2+1*5)*(6+4+6+1+2*3+5*3)*(6+2+2+3+8*5+7+2)")
