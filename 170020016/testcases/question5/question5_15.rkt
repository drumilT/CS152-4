#lang racket
(require "q5.rkt")
(define test-tree (node '+ (node '* (node '+ (node '+ (node '+ (node '* (leaf 5) (leaf 6)) (node '+ (leaf 3) (leaf 4))) (node '+ (node '+ (leaf 3) (leaf 9)) (node '* (leaf 0) (leaf 0)))) (node '+ (node '* (node '* (leaf 6) (leaf 1)) (node '* (leaf 0) (leaf 8))) (node '+ (node '+ (leaf 4) (leaf 1)) (node '+ (leaf 7) (leaf 7))))) (node '+ (node '* (node '+ (node '* (leaf 2) (leaf 8)) (node '* (leaf 3) (leaf 0))) (node '* (node '+ (leaf 2) (leaf 7)) (node '+ (leaf 2) (leaf 1)))) (node '* (node '* (node '+ (leaf 7) (leaf 0)) (node '* (leaf 2) (leaf 0))) (node '* (node '+ (leaf 7) (leaf 8)) (node '+ (leaf 2) (leaf 3)))))) (node '* (node '* (node '* (node '+ (node '* (leaf 4) (leaf 3)) (node '+ (leaf 7) (leaf 2))) (node '* (node '* (leaf 2) (leaf 6)) (node '+ (leaf 5) (leaf 3)))) (node '+ (node '+ (node '+ (leaf 3) (leaf 3)) (node '+ (leaf 1) (leaf 7))) (node '+ (node '+ (leaf 2) (leaf 6)) (node '* (leaf 7) (leaf 0))))) (node '* (node '* (node '+ (node '* (leaf 6) (leaf 0)) (node '* (leaf 9) (leaf 7))) (node '+ (node '+ (leaf 0) (leaf 4)) (node '+ (leaf 5) (leaf 1)))) (node '* (node '+ (node '+ (leaf 7) (leaf 1)) (node '* (leaf 8) (leaf 9))) (node '+ (node '* (leaf 2) (leaf 7)) (node '+ (leaf 6) (leaf 8))))))))
(equal? (convert test-tree) "(5*6+3+4+3+9+0*0+6*1*0*8+4+1+7+7)*((2*8+3*0)*(2+7)*(2+1)+(7+0)*2*0*(7+8)*(2+3))+(4*3+7+2)*2*6*(5+3)*(3+3+1+7+2+6+7*0)*(6*0+9*7)*(0+4+5+1)*(7+1+8*9)*(2*7+6+8)")
