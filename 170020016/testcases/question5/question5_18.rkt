#lang racket
(require "q5.rkt")
(define test-tree (node '* (node '* (node '* (node '* (node '* (node '+ (leaf 8) (leaf 7)) (node '+ (leaf 6) (leaf 5))) (node '+ (node '* (leaf 5) (leaf 3)) (node '+ (leaf 9) (leaf 4)))) (node '* (node '* (node '* (leaf 4) (leaf 3)) (node '+ (leaf 1) (leaf 6))) (node '* (node '* (leaf 6) (leaf 8)) (node '* (leaf 7) (leaf 8))))) (node '+ (node '* (node '* (node '* (leaf 5) (leaf 4)) (node '* (leaf 9) (leaf 0))) (node '* (node '+ (leaf 0) (leaf 6)) (node '+ (leaf 0) (leaf 3)))) (node '* (node '+ (node '* (leaf 3) (leaf 5)) (node '+ (leaf 2) (leaf 1))) (node '+ (node '* (leaf 4) (leaf 5)) (node '+ (leaf 8) (leaf 5)))))) (node '+ (node '* (node '+ (node '+ (node '* (leaf 6) (leaf 5)) (node '+ (leaf 8) (leaf 0))) (node '* (node '* (leaf 4) (leaf 4)) (node '+ (leaf 9) (leaf 1)))) (node '* (node '* (node '+ (leaf 1) (leaf 6)) (node '* (leaf 2) (leaf 6))) (node '* (node '* (leaf 8) (leaf 8)) (node '+ (leaf 1) (leaf 9))))) (node '* (node '+ (node '* (node '* (leaf 6) (leaf 2)) (node '* (leaf 7) (leaf 1))) (node '* (node '+ (leaf 2) (leaf 5)) (node '* (leaf 7) (leaf 3)))) (node '+ (node '+ (node '* (leaf 7) (leaf 8)) (node '+ (leaf 9) (leaf 7))) (node '+ (node '* (leaf 4) (leaf 9)) (node '+ (leaf 1) (leaf 7))))))))
(equal? (convert test-tree) "(8+7)*(6+5)*(5*3+9+4)*4*3*(1+6)*6*8*7*8*(5*4*9*0*(0+6)*(0+3)+(3*5+2+1)*(4*5+8+5))*((6*5+8+0+4*4*(9+1))*(1+6)*2*6*8*8*(1+9)+(6*2*7*1+(2+5)*7*3)*(7*8+9+7+4*9+1+7))")
