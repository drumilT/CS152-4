#lang racket
(require "q5.rkt")
(define test-tree (node '* (node '+ (leaf 4) (node '+ (node '* (node '* (node '* (leaf 7) (leaf 7)) (node '* (leaf 4) (leaf 0))) (node '+ (node '+ (leaf 6) (leaf 6)) (node '+ (leaf 3) (leaf 3)))) (node '+ (node '+ (node '* (leaf 2) (leaf 1)) (node '+ (leaf 0) (leaf 8))) (node '* (node '+ (leaf 3) (leaf 6)) (node '* (leaf 4) (leaf 4)))))) (node '+ (node '+ (node '+ (node '* (node '+ (leaf 4) (leaf 8)) (node '* (leaf 2) (leaf 4))) (node '* (node '+ (leaf 1) (leaf 0)) (node '* (leaf 1) (leaf 8)))) (node '+ (node '* (node '* (leaf 8) (leaf 4)) (node '+ (leaf 5) (leaf 9))) (node '* (node '* (leaf 1) (leaf 7)) (node '+ (leaf 3) (leaf 0))))) (node '+ (node '+ (node '* (node '* (leaf 0) (leaf 3)) (node '+ (leaf 6) (leaf 1))) (node '* (node '+ (leaf 8) (leaf 1)) (node '* (leaf 3) (leaf 8)))) (node '* (node '* (node '+ (leaf 7) (leaf 3)) (node '* (leaf 7) (leaf 9))) (node '+ (node '+ (leaf 6) (leaf 9)) (node '* (leaf 6) (leaf 6))))))))
(equal? (convert test-tree) "(4+7*7*4*0*(6+6+3+3)+2*1+0+8+(3+6)*4*4)*((4+8)*2*4+(1+0)*1*8+8*4*(5+9)+1*7*(3+0)+0*3*(6+1)+(8+1)*3*8+(7+3)*7*9*(6+9+6*6))")
